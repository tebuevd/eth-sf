/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AirdropInterface extends utils.Interface {
  functions: {
    "airdropConfig(uint256)": FunctionFragment;
    "claim(uint256,address,uint256,bytes32[])": FunctionFragment;
    "claimed(uint256,address)": FunctionFragment;
    "createAirdrop(bytes32,uint256,address,uint256,uint256)": FunctionFragment;
    "drainAirdropFunds(uint256,address)": FunctionFragment;
    "nextAirdropId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airdropConfig"
      | "claim"
      | "claimed"
      | "createAirdrop"
      | "drainAirdropFunds"
      | "nextAirdropId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdropConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdrop",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drainAirdropFunds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAirdropId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainAirdropFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAirdropId",
    data: BytesLike
  ): Result;

  events: {
    "AirdropCreated(uint256,bytes32,uint256,address,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
}

export interface AirdropCreatedEventObject {
  airdropId: BigNumber;
  merkleRoot: string;
  totalAmount: BigNumber;
  adminAddress: string;
  airdropStartTime: BigNumber;
  airdropEndTime: BigNumber;
}
export type AirdropCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  AirdropCreatedEventObject
>;

export type AirdropCreatedEventFilter = TypedEventFilter<AirdropCreatedEvent>;

export interface ClaimEventObject {
  to: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface Airdrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        tokenAddress: string;
        merkleRoot: string;
        adminAddress: string;
        airdropStartTime: BigNumber;
        airdropEndTime: BigNumber;
        amountRemaining: BigNumber;
      }
    >;

    claim(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _totalSum: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _airdropStartTime: PromiseOrValue<BigNumberish>,
      _airdropEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drainAirdropFunds(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextAirdropId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  airdropConfig(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      tokenAddress: string;
      merkleRoot: string;
      adminAddress: string;
      airdropStartTime: BigNumber;
      airdropEndTime: BigNumber;
      amountRemaining: BigNumber;
    }
  >;

  claim(
    _airdropId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createAirdrop(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _totalSum: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    _airdropStartTime: PromiseOrValue<BigNumberish>,
    _airdropEndTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drainAirdropFunds(
    _airdropId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextAirdropId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    airdropConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        tokenAddress: string;
        merkleRoot: string;
        adminAddress: string;
        airdropStartTime: BigNumber;
        airdropEndTime: BigNumber;
        amountRemaining: BigNumber;
      }
    >;

    claim(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _totalSum: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _airdropStartTime: PromiseOrValue<BigNumberish>,
      _airdropEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drainAirdropFunds(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextAirdropId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AirdropCreated(uint256,bytes32,uint256,address,uint256,uint256)"(
      airdropId?: null,
      merkleRoot?: null,
      totalAmount?: null,
      adminAddress?: null,
      airdropStartTime?: null,
      airdropEndTime?: null
    ): AirdropCreatedEventFilter;
    AirdropCreated(
      airdropId?: null,
      merkleRoot?: null,
      totalAmount?: null,
      adminAddress?: null,
      airdropStartTime?: null,
      airdropEndTime?: null
    ): AirdropCreatedEventFilter;

    "Claim(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(to?: PromiseOrValue<string> | null, amount?: null): ClaimEventFilter;
  };

  estimateGas: {
    airdropConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _totalSum: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _airdropStartTime: PromiseOrValue<BigNumberish>,
      _airdropEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drainAirdropFunds(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextAirdropId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAirdrop(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _totalSum: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _airdropStartTime: PromiseOrValue<BigNumberish>,
      _airdropEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drainAirdropFunds(
      _airdropId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextAirdropId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
