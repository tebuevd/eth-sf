/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Reputation, ReputationInterface } from "../Reputation";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorldID",
        name: "_worldId",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidNullifier",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signal",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nullifierHash",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
    ],
    name: "AddReputation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600160a05234801561001557600080fd5b5060405161036538038061036583398101604081905261003491610045565b6001600160a01b0316608052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516102cd610098600039600060a701526000607701526102cd6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636c29321514610030575b600080fd5b61004361003e3660046101d4565b610045565b005b60008281526020819052604090205460ff161561007557604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f0000000000000000000000000000000000000000000000000000000000000000610106886040516020016100f2919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405261019f565b6040516bffffffffffffffffffffffff193060601b166020820152879061012f906034016100f2565b876040518763ffffffff1660e01b815260040161015196959493929190610230565b60006040518083038186803b15801561016957600080fd5b505afa15801561017d573d6000803e3d6000fd5b50505060009283525050602081905260409020805460ff191660011790555050565b60006008826040516020016101b49190610268565b60408051601f198184030181529190528051602090910120901c92915050565b6000806000806101608086880312156101ec57600080fd5b85356001600160a01b038116811461020357600080fd5b9450602086013593506040860135925080860187101561022257600080fd5b509295919450926060019150565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b6000825160005b81811015610289576020818601810151858301520161026f565b50600092019182525091905056fea26469706673582212200f17f80dc724e2260fe749b76eb7a39ecaa414880b833bdf44a130cabd350a3c64736f6c63430008110033";

type ReputationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReputationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reputation__factory extends ContractFactory {
  constructor(...args: ReputationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _worldId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Reputation> {
    return super.deploy(_worldId, overrides || {}) as Promise<Reputation>;
  }
  override getDeployTransaction(
    _worldId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_worldId, overrides || {});
  }
  override attach(address: string): Reputation {
    return super.attach(address) as Reputation;
  }
  override connect(signer: Signer): Reputation__factory {
    return super.connect(signer) as Reputation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReputationInterface {
    return new utils.Interface(_abi) as ReputationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reputation {
    return new Contract(address, _abi, signerOrProvider) as Reputation;
  }
}
